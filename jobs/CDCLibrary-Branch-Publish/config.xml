<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Unit test of feature submit for code review</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.3.5">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <refspec>$GERRIT_REFSPEC</refspec>
        <url>ssh://juc-jenkins-build@mesos1.gerritforge.com:29418/GerritForge/spark-cdc-library.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$GERRIT_PATCHSET_REVISION</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <browser class="hudson.plugins.git.browser.AssemblaWeb">
      <url></url>
    </browser>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.14.0">
      <spec></spec>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>GerritForge/spark-cdc-library</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>ANT</compareType>
              <pattern>**</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel></notificationLevel>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <noNameAndEmailParameters>false</noNameAndEmailParameters>
      <dependencyJobsNames></dependencyJobsNames>
      <readableMessage>false</readableMessage>
      <buildStartMessage></buildStartMessage>
      <buildFailureMessage></buildFailureMessage>
      <buildSuccessfulMessage></buildSuccessfulMessage>
      <buildUnstableMessage></buildUnstableMessage>
      <buildNotBuiltMessage></buildNotBuiltMessage>
      <buildUnsuccessfulFilepath></buildUnsuccessfulFilepath>
      <customUrl></customUrl>
      <serverName>gerrit-on-mesos</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
          <excludeDrafts>true</excludeDrafts>
          <excludeTrivialRebase>true</excludeTrivialRebase>
          <excludeNoCodeChange>true</excludeNoCodeChange>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginPatchsetCreatedEvent>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL></triggerConfigURL>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <org.jvnet.hudson.plugins.SbtPluginBuilder plugin="sbt@1.5">
      <name>sbt 0.13.8</name>
      <jvmFlags></jvmFlags>
      <sbtFlags></sbtFlags>
      <actions>test publishLocal</actions>
      <subdirPath></subdirPath>
    </org.jvnet.hudson.plugins.SbtPluginBuilder>
  </builders>
  <publishers>
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@0.17">
      <groovyScriptContentList>
        <org.jenkinsci.plugins.postbuildscript.GroovyScriptContent>
          <content>import hudson.model.*
import hudson.AbortException
import hudson.console.HyperlinkNote
import java.util.concurrent.CancellationException
import groovy.json.*

def jsonSlurper = new JsonSlurper()

def thr = Thread.currentThread()
def build = thr?.executable

def changeNumber =  build.buildVariableResolver.resolve(&quot;GERRIT_CHANGE_NUMBER&quot;)
println &quot;Gerrit change number is &quot; + changeNumber

def gerrit = &quot;http://juc-gerrit.gerritforge.com&quot;
def currentChangeInfo = new URL(gerrit + &quot;/changes/?q=project:GerritForge/spark-cdc-library&amp;O=81&amp;pp=0&amp;n=&quot; + changeNumber).getText().split(&quot;\n&quot;)[1]

println &quot;Current change info are &quot; + currentChangeInfo

def currentTopic = currentChangeInfo.topic

def topic = new URL(gerrit + &quot;/changes/?q=status:open+project:GerritForge/spark-etl-demo+topic:&quot; + currentTopic + &quot;&amp;pp=0&quot;).getText().split(&quot;\n&quot;)[1]
def topicJson = jsonSlurper.parseText(topic)

println topicJson

def change = new URL(gerrit + &quot;/changes/&quot; + topicJson[0]._number + &quot;/detail?o=CURRENT_REVISION&amp;pp=0&quot;).getText().split(&quot;\n&quot;)[1]
def changeJson = jsonSlurper.parseText(change)

println changeJson.current_revision

def job = Hudson.instance.getJob(&apos;SparkJob-Branch-ChainedTest&apos;)

def params = [
      new StringParameterValue(&apos;GERRIT_PATCHSET_REVISION&apos;, changeJson.current_revision),
    ]
def anotherBuild

try {
	def future = job.scheduleBuild2(0, new ParametersAction(params))
	println &quot;Triggered job &quot; + HyperlinkNote.encodeTo(&apos;/&apos; + job.url, job.fullDisplayName)
    anotherBuild = future.get()
} catch (CancellationException x) {
    throw new AbortException(&quot;${job.fullDisplayName} aborted.&quot;)
}
println HyperlinkNote.encodeTo(&apos;/&apos; + anotherBuild.url, anotherBuild.fullDisplayName) + &quot; completed. Result was &quot; + anotherBuild.result

// Check that it succeeded
if (anotherBuild.result != Result.SUCCESS &amp;&amp; anotherBuild.result != Result.UNSTABLE) {
    // We abort this build right here and now.
    throw new AbortException(&quot;${anotherBuild.fullDisplayName} failed.&quot;)
}
</content>
        </org.jenkinsci.plugins.postbuildscript.GroovyScriptContent>
      </groovyScriptContentList>
      <scriptOnlyIfSuccess>true</scriptOnlyIfSuccess>
      <scriptOnlyIfFailure>false</scriptOnlyIfFailure>
      <markBuildUnstable>false</markBuildUnstable>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.4.1">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>
  </buildWrappers>
</project>